name: 'scitt-client'
description: 'Create and submit statement to a SCITT instance'
inputs:
  issuer:
    description: 'Issuer of statement'
    required: true
  subject:
    description: 'Subject of statement'
    required: false
  payload:
    description: 'Payload for statement'
    required: true
  payload-content-type:
    description: 'Statement payload content-type'
    required: false
    default: 'application/json'
  private-key-pem:
    description: 'Private key pem bytes'
    required: false
  token:
    description: 'Token to auth to SCITT instance'
    required: false
  scitt-url:
    description: 'URL of scitt instance'
    required: true
outputs:
  entry-id:
    description: "Entry ID of submitted statement"
    value: ${{ steps.submit-statement.outputs.entry-id }}
runs:
  using: "composite"
  steps:
    - name: Create statement
      shell: bash -xeuo pipefail {0}
      env:
        ISSUER: ${{ inputs.issuer }}
        PAYLOAD: ${{ inputs.payload }}
        SUBJECT: ${{ inputs.subject }}
        TOKEN: ${{ inputs.token }}
        PRIVATE_KEY_PEM: ${{ inputs.private-key-pem }}
        PAYLOAD_CONTENT_TYPE: ${{ inputs.payload-content-type }}
      run: |
        scitt-emulator client create-claim --issuer "${ISSUER}" --content-type "${PAYLOAD_CONTENT_TYPE}" --payload "${PAYLOAD}" --out statement.cbor
    - name: Submit statement
      shell: bash -xeuo pipefail {0}
      id: submit-statement
      env:
        SCITT_URL: ${{ inputs.scitt-url }}
      run: |
        scitt-emulator client submit-claim --url "${SCITT_URL}" --claim statement.cbor --out statement.receipt.cbor 2>&1 | tee >(grep Entry\ ID: | awk '{print $NF}' > entry_id.txt)
        echo "entry-id=$(cat entry_id.txt)" >> "${GITHUB_OUTPUT}"
